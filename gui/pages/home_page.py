import customtkinter as ctk
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
import os
import logging
import threading
import time
import openpyxl as px
from datetime import datetime
import pandas as pd  

from database.database_manager import DatabaseManager
from my_parking.statistics import ParkingStatistics

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class HomePage(ctk.CTkFrame):
    def __init__(self, master):
        super().__init__(master, fg_color="transparent")
        
        # Kh·ªüi t·∫°o database manager
        self.db_manager = DatabaseManager()
        
        # Kh·ªüi t·∫°o th·ªëng k√™
        self.stats = ParkingStatistics(self.db_manager)
        
        # Tr·∫°ng th√°i ch·∫°y
        self.running = False
        self.update_thread = None
        self.stop_flag = threading.Event()
        
        # Store current data for export
        self.current_export_data = []
        
        # Kh·ªüi t·∫°o UI
        self.setup_ui()
        
        logger.info("ƒê√£ kh·ªüi t·∫°o trang ch·ªß")
    
    def setup_ui(self):
        """
        Thi·∫øt l·∫≠p giao di·ªán trang ch·ªß theo layout m·ªõi
        """
        # C·∫•u h√¨nh grid ch√≠nh
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)  # Ph·∫ßn tr√™n
        self.grid_rowconfigure(2, weight=1)  # Ph·∫ßn d∆∞·ªõi
        
        # Ti√™u ƒë·ªÅ
        self.title_label = ctk.CTkLabel(
            self, 
            text="Trang ch·ªß",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        self.title_label.grid(row=0, column=0, padx=20, pady=(20, 10), sticky="w")
        
        # PH·∫¶N TR√äN - Chia 2 c·ªôt
        self.top_frame = ctk.CTkFrame(self)
        self.top_frame.grid(row=1, column=0, padx=20, pady=10, sticky="nsew")
        self.top_frame.grid_columnconfigure(0, weight=1)  # C·ªôt tr√°i
        self.top_frame.grid_columnconfigure(1, weight=2)  # C·ªôt ph·∫£i r·ªông h∆°n
        self.top_frame.grid_rowconfigure(0, weight=1)
        
        # C·ªòT TR√ÅI - 2 th·∫ª th·ªëng k√™
        self.left_stats_frame = ctk.CTkFrame(self.top_frame)
        self.left_stats_frame.grid(row=0, column=0, padx=(10, 5), pady=10, sticky="nsew")
        self.left_stats_frame.grid_columnconfigure(0, weight=1)
        self.left_stats_frame.grid_rowconfigure(0, weight=1)
        self.left_stats_frame.grid_rowconfigure(1, weight=1)
        
        # Th·∫ª 1: T·ªïng s·ªë xe hi·ªán t·∫°i
        self.current_vehicles_frame = ctk.CTkFrame(self.left_stats_frame)
        self.current_vehicles_frame.grid(row=0, column=0, padx=10, pady=(10, 5), sticky="nsew")
        
        self.current_vehicles_title = ctk.CTkLabel(
            self.current_vehicles_frame,
            text="T·ªïng s·ªë xe hi·ªán t·∫°i",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        self.current_vehicles_title.pack(pady=(15, 5))
        
        self.current_vehicles_count = ctk.CTkLabel(
            self.current_vehicles_frame,
            text="0",
            font=ctk.CTkFont(size=48, weight="bold"),
            text_color="#4CAF50"
        )
        self.current_vehicles_count.pack(expand=True)
        
        # Th·∫ª 2: T·ªïng v·ªã tr√≠ tr·ªëng
        self.free_spots_frame = ctk.CTkFrame(self.left_stats_frame)
        self.free_spots_frame.grid(row=1, column=0, padx=10, pady=(5, 10), sticky="nsew")
        
        self.free_spots_title = ctk.CTkLabel(
            self.free_spots_frame,
            text="T·ªïng v·ªã tr√≠ tr·ªëng",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        self.free_spots_title.pack(pady=(15, 5))
        
        self.free_spots_count = ctk.CTkLabel(
            self.free_spots_frame,
            text="0 / 0",
            font=ctk.CTkFont(size=48, weight="bold"),
            text_color="#2196F3"
        )
        self.free_spots_count.pack(expand=True)
        
        # C·ªòT PH·∫¢I - Bi·ªÉu ƒë·ªì th·ªëng k√™
        self.chart_section = ctk.CTkFrame(self.top_frame)
        self.chart_section.grid(row=0, column=1, padx=(5, 10), pady=10, sticky="nsew")
        self.chart_section.grid_columnconfigure(0, weight=1)
        self.chart_section.grid_rowconfigure(1, weight=1)  # Khu v·ª±c bi·ªÉu ƒë·ªì m·ªü r·ªông
        
        # Header bi·ªÉu ƒë·ªì v·ªõi ti√™u ƒë·ªÅ v√† radio buttons
        self.chart_header = ctk.CTkFrame(self.chart_section, fg_color="transparent")
        self.chart_header.grid(row=0, column=0, padx=15, pady=(15, 10), sticky="ew")
        self.chart_header.grid_columnconfigure(0, weight=1)
        
        self.chart_title = ctk.CTkLabel(
            self.chart_header,
            text="Bi·ªÉu ƒë·ªì th·ªëng k√™",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        self.chart_title.grid(row=0, column=0, sticky="w")
        
        # Radio buttons cho l·ª±a ch·ªçn th·ªùi gian - ƒê√É S·ª¨A: Th√™m callback ƒë·ªÉ c·∫≠p nh·∫≠t t·∫•t c·∫£
        self.stats_period_var = tk.StringVar(value="day")
        self.period_frame = ctk.CTkFrame(self.chart_header, fg_color="transparent")
        self.period_frame.grid(row=0, column=1, sticky="e")
        
        self.day_radio = ctk.CTkRadioButton(
            self.period_frame,
            text="Ng√†y",
            variable=self.stats_period_var,
            value="day",
            command=self.update_all_content  # Thay ƒë·ªïi callback
        )
        self.day_radio.pack(side="left", padx=5)
        
        self.week_radio = ctk.CTkRadioButton(
            self.period_frame,
            text="Tu·∫ßn",
            variable=self.stats_period_var,
            value="week",
            command=self.update_all_content  # Thay ƒë·ªïi callback
        )
        self.week_radio.pack(side="left", padx=5)
        
        self.month_radio = ctk.CTkRadioButton(
            self.period_frame,
            text="Th√°ng",
            variable=self.stats_period_var,
            value="month",
            command=self.update_all_content  # Thay ƒë·ªïi callback
        )
        self.month_radio.pack(side="left", padx=5)
        
        # Khu v·ª±c hi·ªÉn th·ªã bi·ªÉu ƒë·ªì - m·ªü r·ªông to√†n b·ªô kh√¥ng gian c√≤n l·∫°i
        self.chart_frame = ctk.CTkFrame(self.chart_section)
        self.chart_frame.grid(row=1, column=0, padx=15, pady=(0, 15), sticky="nsew")
        self.chart_frame.configure(height=320, width=650)
        
        self.chart_label = ctk.CTkLabel(
            self.chart_frame,
            text="ƒêang t·∫£i bi·ªÉu ƒë·ªì...",
            font=ctk.CTkFont(size=14)
        )
        self.chart_label.pack(expand=True)
        
        # PH·∫¶N D∆Ø·ªöI - Danh s√°ch th·ªëng k√™ (m·ªü r·ªông to√†n b·ªô kh√¥ng gian c√≤n l·∫°i)
        self.table_section = ctk.CTkFrame(self)
        self.table_section.grid(row=2, column=0, padx=20, pady=(0, 20), sticky="nsew")
        self.table_section.grid_columnconfigure(0, weight=1)
        self.table_section.grid_rowconfigure(1, weight=1)
        
        # Header cho b·∫£ng v·ªõi ti√™u ƒë·ªÅ v√† n√∫t Export Excel
        self.table_header = ctk.CTkFrame(self.table_section, fg_color="transparent")
        self.table_header.grid(row=0, column=0, padx=15, pady=(15, 10), sticky="ew")
        self.table_header.grid_columnconfigure(0, weight=1)
        
        # Ti√™u ƒë·ªÅ b·∫£ng
        self.table_title = ctk.CTkLabel(
            self.table_header,
            text="Danh s√°ch th·ªëng k√™",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        self.table_title.grid(row=0, column=0, sticky="w")
        
        # N√∫t Export Excel
        self.export_button = ctk.CTkButton(
            self.table_header,
            text="üìä Xu·∫•t Excel",
            font=ctk.CTkFont(size=14),
            width=120,
            height=32,
            fg_color="#28a745",
            hover_color="#218838",
            command=self.export_to_excel
        )
        self.export_button.grid(row=0, column=1, sticky="e", padx=10)
        
        # Styling cho Treeview
        self.style = ttk.Style()
        self.style.configure("Treeview", 
                            background="#2b2b2b",
                            foreground="white",
                            rowheight=25,
                            fieldbackground="#2b2b2b")
        self.style.map('Treeview', background=[('selected', '#347ab3')])
        self.style.configure("Treeview.Heading", 
                            background="#2a6496", 
                            foreground="white", 
                            relief="flat")
        
        # Frame ch·ª©a b·∫£ng v·ªõi scrollbars ƒë·∫ßy ƒë·ªß
        self.tree_frame = ctk.CTkFrame(self.table_section, fg_color="transparent")
        self.tree_frame.grid(row=1, column=0, padx=15, pady=(0, 15), sticky="nsew")
        self.tree_frame.grid_columnconfigure(0, weight=1)
        self.tree_frame.grid_rowconfigure(0, weight=1)
        
        # T·∫°o Treeview
        self.tree = ttk.Treeview(self.tree_frame, style="Treeview")
        
        # ƒê·ªãnh nghƒ©a c√°c c·ªôt - b·ªè c·ªôt parking_spot
        self.tree["columns"] = ("license_plate", "student_name", "student_id", "entry_time", "exit_time")
        self.tree.column("#0", width=50, minwidth=50, anchor="center")
        self.tree.column("license_plate", width=120, minwidth=120, anchor="center")
        self.tree.column("student_name", width=180, minwidth=180, anchor="center")
        self.tree.column("student_id", width=120, minwidth=120, anchor="center")
        self.tree.column("entry_time", width=150, minwidth=150, anchor="center")
        self.tree.column("exit_time", width=150, minwidth=150, anchor="center")
        
        # ƒê·ªãnh nghƒ©a ti√™u ƒë·ªÅ c·ªôt - b·ªè c·ªôt parking_spot
        self.tree.heading("#0", text="STT")
        self.tree.heading("license_plate", text="Bi·ªÉn s·ªë")
        self.tree.heading("student_name", text="H·ªç t√™n sinh vi√™n")
        self.tree.heading("student_id", text="MSSV")
        self.tree.heading("entry_time", text="Th·ªùi gian v√†o")
        self.tree.heading("exit_time", text="Th·ªùi gian ra")
        
        # Scrollbars ƒë·∫ßy ƒë·ªß
        self.scrollbar_y = ctk.CTkScrollbar(self.tree_frame, orientation="vertical", command=self.tree.yview)
        self.scrollbar_y.grid(row=0, column=1, sticky="ns")
        
        self.scrollbar_x = ctk.CTkScrollbar(self.tree_frame, orientation="horizontal", command=self.tree.xview)
        self.scrollbar_x.grid(row=1, column=0, sticky="ew")
        
        self.tree.configure(yscrollcommand=self.scrollbar_y.set, xscrollcommand=self.scrollbar_x.set)
        self.tree.grid(row=0, column=0, sticky="nsew")
    
    def export_to_excel(self):
        """
        Xu·∫•t d·ªØ li·ªáu b·∫£ng hi·ªán t·∫°i ra file Excel
        """
        try:
            # Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t kh√¥ng
            if not self.current_export_data:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!")
                return
            
            # M·ªü dialog ch·ªçn n∆°i l∆∞u file
            current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
            period = self.stats_period_var.get()
            period_text = {"day": "Ngay", "week": "Tuan", "month": "Thang"}[period]
            
            default_filename = f"BaoCao_BaiXe_{period_text}_{current_time}.xlsx"
            
            file_path = filedialog.asksaveasfilename(
                title="L∆∞u file Excel",
                defaultextension=".xlsx",
                initialfile=default_filename,
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
            )
            
            if not file_path:
                return  # Ng∆∞·ªùi d√πng h·ªßy
            
            # T·∫°o DataFrame t·ª´ d·ªØ li·ªáu hi·ªán t·∫°i
            df = pd.DataFrame(self.current_export_data)
            
            # ƒê·ªïi t√™n c·ªôt sang ti·∫øng Vi·ªát
            df.columns = ["STT", "Bi·ªÉn s·ªë", "H·ªç t√™n sinh vi√™n", "MSSV", "Th·ªùi gian v√†o", "Th·ªùi gian ra"]
            
            # Th√™m th√¥ng tin metadata
            period_name = {"day": "Theo ng√†y", "week": "Theo tu·∫ßn", "month": "Theo th√°ng"}[period]
            export_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            
            # T·∫°o Excel writer v·ªõi nhi·ªÅu sheet
            with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                # Sheet ch√≠nh v·ªõi d·ªØ li·ªáu
                df.to_excel(writer, sheet_name='D·ªØ li·ªáu', index=False)
                
                # Sheet th·ªëng k√™ t·ªïng h·ª£p
                summary_data = {
                    'Th√¥ng tin': [
                        'Th·ªùi gian xu·∫•t b√°o c√°o',
                        'Lo·∫°i b√°o c√°o',
                        'T·ªïng s·ªë b·∫£n ghi',
                        'S·ªë xe v√†o',
                        'S·ªë xe ra',
                        'S·ªë xe hi·ªán t·∫°i trong b√£i'
                    ],
                    'Gi√° tr·ªã': [
                        export_time,
                        period_name,
                        len(df),
                        len(df[df['Th·ªùi gian ra'].notna()]),
                        len(df[df['Th·ªùi gian ra'].isna()]),
                        len(df[df['Th·ªùi gian ra'].isna()])
                    ]
                }
                
                summary_df = pd.DataFrame(summary_data)
                summary_df.to_excel(writer, sheet_name='Th·ªëng k√™', index=False)
                
                # ƒê·ªãnh d·∫°ng Excel
                workbook = writer.book
                
                # ƒê·ªãnh d·∫°ng sheet d·ªØ li·ªáu
                worksheet = workbook['D·ªØ li·ªáu']
                worksheet.auto_filter.ref = worksheet.dimensions
                
                # ƒê·ªãnh d·∫°ng header
                for cell in worksheet[1]:
                    cell.font = cell.font.copy(bold=True)
                    cell.fill = cell.fill.copy(fgColor="366092")
                
                # ƒê·ªãnh d·∫°ng sheet th·ªëng k√™
                summary_worksheet = workbook['Th·ªëng k√™']
                for cell in summary_worksheet[1]:
                    cell.font = cell.font.copy(bold=True)
                    cell.fill = cell.fill.copy(fgColor="28a745")
            
            # Th√¥ng b√°o th√†nh c√¥ng
            messagebox.showinfo(
                "Th√†nh c√¥ng", 
                f"ƒê√£ xu·∫•t {len(df)} b·∫£n ghi ra file Excel th√†nh c√¥ng!\n\nFile ƒë∆∞·ª£c l∆∞u t·∫°i:\n{file_path}"
            )
            
            logger.info(f"ƒê√£ xu·∫•t {len(df)} b·∫£n ghi ra file Excel: {file_path}")
            
        except ImportError:
            messagebox.showerror(
                "L·ªói", 
                "Kh√¥ng t√¨m th·∫•y th∆∞ vi·ªán pandas ho·∫∑c openpyxl!\n\nVui l√≤ng c√†i ƒë·∫∑t:\npip install pandas openpyxl"
            )
        except Exception as e:
            logger.error(f"L·ªói khi xu·∫•t Excel: {e}")
            messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra khi xu·∫•t file Excel:\n{str(e)}")
    
    def on_enter(self):
        """
        ƒê∆∞·ª£c g·ªçi khi trang ƒë∆∞·ª£c hi·ªÉn th·ªã
        """
        self.running = True
        self.stop_flag.clear()
        
        # Kh·ªüi ƒë·ªông thread c·∫≠p nh·∫≠t
        self.update_thread = threading.Thread(target=self.update_loop, daemon=True)
        self.update_thread.start()
        
        # C·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c t·∫•t c·∫£ n·ªôi dung
        self.update_all_content()
        
        logger.info("ƒê√£ v√†o trang ch·ªß")
    
    def on_leave(self):
        """
        ƒê∆∞·ª£c g·ªçi khi r·ªùi kh·ªèi trang
        """
        self.running = False
        self.stop_flag.set()
        
        if self.update_thread:
            self.update_thread.join(timeout=1.0)
            self.update_thread = None
        
        logger.info("ƒê√£ r·ªùi kh·ªèi trang ch·ªß")
    
    def update_loop(self):
        """
        V√≤ng l·∫∑p c·∫≠p nh·∫≠t d·ªØ li·ªáu
        """
        while self.running and not self.stop_flag.is_set():
            try:
                # C·∫≠p nh·∫≠t n·ªôi dung trang (ch·ªâ c·∫≠p nh·∫≠t "T·ªïng v·ªã tr√≠ tr·ªëng", kh√¥ng c·∫≠p nh·∫≠t theo period)
                self.update_static_content()
                
                # ƒê·ª£i 5 gi√¢y ho·∫∑c cho ƒë·∫øn khi stop_flag ƒë∆∞·ª£c ƒë·∫∑t
                self.stop_flag.wait(timeout=5.0)
            except Exception as e:
                logger.error(f"L·ªói trong v√≤ng l·∫∑p c·∫≠p nh·∫≠t: {e}")
    
    def update_static_content(self):
        """
        C·∫≠p nh·∫≠t n·ªôi dung tƒ©nh (ch·ªâ t·ªïng v·ªã tr√≠ tr·ªëng)
        """
        try:
            # L·∫•y th·ªëng k√™ t·ªïng h·ª£p
            summary = self.stats.get_summary_statistics()
            
            # Ch·ªâ c·∫≠p nh·∫≠t "T·ªïng v·ªã tr√≠ tr·ªëng" (kh√¥ng ph·ª• thu·ªôc v√†o period)
            self.free_spots_count.configure(
                text=f"{summary['free_spots']} / {summary['total_spots']}"
            )
            
        except Exception as e:
            logger.error(f"L·ªói khi c·∫≠p nh·∫≠t n·ªôi dung tƒ©nh: {e}")
    
    def update_all_content(self):
        """
        C·∫≠p nh·∫≠t t·∫•t c·∫£ n·ªôi dung theo period ƒë∆∞·ª£c ch·ªçn
        """
        try:
            period = self.stats_period_var.get()
            
            # C·∫≠p nh·∫≠t "T·ªïng s·ªë xe hi·ªán t·∫°i" theo period
            current_vehicles = self.get_current_vehicles_by_period(period)
            self.current_vehicles_count.configure(text=str(current_vehicles))
            
            # C·∫≠p nh·∫≠t "T·ªïng v·ªã tr√≠ tr·ªëng" (kh√¥ng thay ƒë·ªïi theo period)
            summary = self.stats.get_summary_statistics()
            self.free_spots_count.configure(
                text=f"{summary['free_spots']} / {summary['total_spots']}"
            )
            
            # C·∫≠p nh·∫≠t b·∫£ng d·ªØ li·ªáu theo period
            self.update_table_by_period(period)
            
            # C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì theo period
            self.update_chart()
            
        except Exception as e:
            logger.error(f"L·ªói khi c·∫≠p nh·∫≠t t·∫•t c·∫£ n·ªôi dung: {e}")
    
    def get_current_vehicles_by_period(self, period):
        """
        L·∫•y s·ªë l∆∞·ª£ng xe theo period ƒë∆∞·ª£c ch·ªçn
        """
        try:
            if period == "day":
                # S·ªë xe v√†o trong ng√†y h√¥m nay
                return self.db_manager.get_vehicles_count_by_period("day")
            elif period == "week":
                # S·ªë xe v√†o trong tu·∫ßn n√†y
                return self.db_manager.get_vehicles_count_by_period("week")
            elif period == "month":
                # S·ªë xe v√†o trong th√°ng n√†y
                return self.db_manager.get_vehicles_count_by_period("month")
            else:
                return 0
        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y s·ªë xe theo period: {e}")
            return 0
    
    def update_chart(self):
        """
        C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì th·ªëng k√™
        """
        try:
            # L·∫•y kho·∫£ng th·ªùi gian ƒë∆∞·ª£c ch·ªçn
            period = self.stats_period_var.get()
            
            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
            self.chart_label.configure(text="ƒêang t·∫£i bi·ªÉu ƒë·ªì...")
            
            # X√≥a widget h√¨nh ·∫£nh c≈© n·∫øu c√≥
            for widget in self.chart_frame.winfo_children():
                if widget != self.chart_label:
                    widget.destroy()
            
            # T·∫°o bi·ªÉu ƒë·ªì trong thread ri√™ng ƒë·ªÉ kh√¥ng l√†m ƒë·ª©ng UI
            def generate_chart():
                try:
                    # T·∫°o bi·ªÉu ƒë·ªì t∆∞∆°ng ·ª©ng
                    if period == "day":
                        chart_data = self.stats.generate_daily_chart()
                    elif period == "week":
                        chart_data = self.stats.generate_weekly_chart()
                    else:  # month
                        chart_data = self.stats.generate_monthly_chart()
                    
                    if chart_data:
                        # Chuy·ªÉn ƒë·ªïi base64 th√†nh h√¨nh ·∫£nh
                        import base64
                        from io import BytesIO
                        
                        image_data = base64.b64decode(chart_data)
                        image = Image.open(BytesIO(image_data))
                        
                        # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc
                        # max_width = self.chart_frame.winfo_width() - 20
                        # max_height = self.chart_frame.winfo_height() - 20
                        
                        # if max_width > 0 and max_height > 0:
                        #     image = self.resize_image(image, max_width, max_height)
                        
                        fixed_width = 600   # Chi·ªÅu r·ªông c·ªë ƒë·ªãnh
                        fixed_height = 300  # Chi·ªÅu cao c·ªë ƒë·ªãnh
                        image = image.resize((fixed_width, fixed_height), Image.LANCZOS)

                        # Hi·ªÉn th·ªã tr√™n UI
                        photo = ImageTk.PhotoImage(image)
                        
                        # C·∫≠p nh·∫≠t UI trong main thread
                        self.after(0, lambda: self.display_chart(photo))
                    else:
                        # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
                        self.after(0, lambda: self.chart_label.configure(
                            text="Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì. Vui l√≤ng th·ª≠ l·∫°i sau."
                        ))
                except Exception as e:
                    logger.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {e}")
                    self.after(0, lambda: self.chart_label.configure(
                        text=f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {e}"
                    ))
            
            # Kh·ªüi ƒë·ªông thread t·∫°o bi·ªÉu ƒë·ªì
            chart_thread = threading.Thread(target=generate_chart, daemon=True)
            chart_thread.start()
            
        except Exception as e:
            logger.error(f"L·ªói khi c·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì: {e}")
            self.chart_label.configure(text=f"L·ªói khi c·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì: {e}")
    
    def display_chart(self, photo):
        """
        Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì l√™n UI
        """
        # X√≥a th√¥ng b√°o ƒëang t·∫£i
        self.chart_label.configure(text="")
        
        # T·∫°o v√† hi·ªÉn th·ªã label ch·ª©a h√¨nh ·∫£nh
        image_label = tk.Label(self.chart_frame, image=photo, bg="#2b2b2b")
        image_label.image = photo  # Gi·ªØ tham chi·∫øu ƒë·ªÉ tr√°nh b·ªã thu gom r√°c
        # image_label.pack(expand=True, fill="both", padx=10, pady=10)
        image_label.place(relx=0.5, rely=0.5, anchor="center")

    # def resize_image(self, image, max_width, max_height):
    #     """
    #     ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc h√¨nh ·∫£nh
    #     """
    #     width, height = image.size
        
    #     # T√≠nh t·ª∑ l·ªá ƒë·ªÉ gi·ªØ t·ª∑ l·ªá khung h√¨nh
    #     width_ratio = max_width / width
    #     height_ratio = max_height / height
    #     ratio = min(width_ratio, height_ratio)
        
    #     new_width = int(width * ratio)
    #     new_height = int(height * ratio)
        
    #     return image.resize((new_width, new_height), Image.LANCZOS)
    
    def update_table_by_period(self, period):
        """
        C·∫≠p nh·∫≠t b·∫£ng d·ªØ li·ªáu theo period ƒë∆∞·ª£c ch·ªçn
        """
        try:
            # X√≥a d·ªØ li·ªáu c≈©
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            # Reset export data
            self.current_export_data = []
            
            # L·∫•y d·ªØ li·ªáu theo period
            if period == "day":
                filter_by = {'date': datetime.now().strftime('%Y-%m-%d')}
            elif period == "week":
                # L·∫•y d·ªØ li·ªáu 7 ng√†y g·∫ßn nh·∫•t
                logs = self.db_manager.get_vehicle_logs_by_period("week", limit=50)
            elif period == "month":
                # L·∫•y d·ªØ li·ªáu th√°ng hi·ªán t·∫°i
                logs = self.db_manager.get_vehicle_logs_by_period("month", limit=50)
            else:
                logs = []
            
            # N·∫øu l√† "day", s·ª≠ d·ª•ng filter_by
            if period == "day":
                logs = self.db_manager.get_vehicle_logs(filter_by=filter_by, limit=50)
            
            # Th√™m d·ªØ li·ªáu m·ªõi v√†o b·∫£ng v√† chu·∫©n b·ªã cho export
            for i, log in enumerate(logs, 1):
                license_plate = log['license_plate']
                student_name = log['full_name'] if log['full_name'] else "N/A"
                student_id = log['student_id'] if log['student_id'] else "N/A"
                entry_time = log['entry_time'] if log['entry_time'] else "N/A"
                exit_time = log['exit_time'] if log['exit_time'] else ""
                
                # Th√™m v√†o table
                self.tree.insert("", "end", text=str(i), values=(
                    license_plate, student_name, student_id, entry_time, exit_time
                ))
                
                # L∆∞u d·ªØ li·ªáu cho export
                self.current_export_data.append([
                    i, license_plate, student_name, student_id, entry_time, exit_time
                ])
            
        except Exception as e:  
            logger.error(f"L·ªói khi c·∫≠p nh·∫≠t b·∫£ng theo period: {e}")
    
    def update_table(self):
        """
        C·∫≠p nh·∫≠t b·∫£ng d·ªØ li·ªáu (s·ª≠ d·ª•ng period hi·ªán t·∫°i)
        """
        period = self.stats_period_var.get()
        self.update_table_by_period(period)